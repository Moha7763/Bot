name: Run Telegram Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-telegram-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install telethon tqdm requests selenium moviepy

      - name: Run bot
        run: |
          import os
          import requests
          from telethon import TelegramClient, events
          from tqdm import tqdm
          from moviepy.editor import VideoFileClip
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from webdriver_manager.chrome import ChromeDriverManager
          import asyncio
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC

          # Telegram API credentials
          bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
          api_id = os.getenv('TELEGRAM_API_ID')
          api_hash = os.getenv('TELEGRAM_API_HASH')

          client = TelegramClient('anon', api_id, api_hash)

          # Event handler for incoming messages
          @client.on(events.NewMessage)
          async def handle_message(event):
              chat_id = event.chat_id
              download_url = event.message.text
              file_path = './downloaded_file.mp4'

              # Download file
              async def download_file(url, file_path):
                  try:
                      options = Options()
                      options.add_argument("--headless")
                      driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
                      driver.get(url)

                      WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, "//a[contains(@href, 'download')]")))

                      download_button = driver.find_element(By.XPATH, '//a[contains(@href, "download")]')
                      download_button.click()

                      total_size = 1024 * 1024 * 100  # Example size (100 MB)
                      block_size = 1024
                      t = tqdm(total=total_size, unit='iB', unit_scale=True)

                      with open(file_path, 'wb') as file:
                          while True:
                              data = driver.page_source.encode()[:block_size]  # Dummy data for illustration
                              t.update(len(data))
                              file.write(data)
                              if t.n >= total_size:
                                  break
                      t.close()
                      driver.quit()
                  except Exception as e:
                      await client.send_message(chat_id, f"Error during download: {e}")
                      raise e

              # Upload file
              async def upload_to_telegram(file_path, chat_id):
                  try:
                      if file_path.endswith(('.mp4', '.mov', '.avi')):
                          clip = VideoFileClip(file_path)
                          clip = clip.resize(height=480)
                          clip.write_videofile("resized_video.mp4")
                          file_path = "resized_video.mp4"
                      
                      await client.send_file(chat_id, file_path)
                      
                      os.remove(file_path)
                  except Exception as e:
                      await client.send_message(chat_id, f"Error during upload: {e}")
                      raise e

              await download_file(download_url, file_path)
              await upload_to_telegram(file_path, chat_id)

          # Start the bot
          with client:
              client.run_until_disconnected()

        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
